WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:03.620
So far in this course we've been using this
toy "check_mem"

00:00:04.200 --> 00:00:08.660
in the tutorial from the official documentation just for
tinkering with.

00:00:09.540 --> 00:00:12.060
Let's see if we can do something a little more realistic and useful.

00:00:13.240 --> 00:00:17.440
You know, not everybody has the luxury of setting up a green-field monitoring system.

00:00:18.120 --> 00:00:19.880
Let's say they that you are migrating from Nagios

00:00:19.880 --> 00:00:23.200
and you want to reuse the existing check definition and plugins

00:00:23.520 --> 00:00:25.640
that you're already using in your
infrastructure.

00:00:26.100 --> 00:00:28.700
I think this is great; I love reusing components.

00:00:29.600 --> 00:00:31.460
Let's download the Nagios plugins.

00:00:34.880 --> 00:00:36.000
Let's see where they are.

00:00:51.360 --> 00:00:55.380
let's get this check disk a try...

00:00:59.420 --> 00:01:06.600
Ok. So far my disk is OK. I'm gunna actually create a "ballast" file that I can  use to simulate what

00:01:06.610 --> 00:01:12.140
it would be like if I filled up the disk. Ok, I
created a ballast file to simulate what it

00:01:12.140 --> 00:01:16.280
would be like if I had a full disk. I've
gotten the check_disk plugin to actually

00:01:16.280 --> 00:01:23.729
fail at 20%. let's use this check,
and actually configure in Sensu and

00:01:23.729 --> 00:01:25.589
see if we can make it email us.

00:01:31.360 --> 00:01:34.760
Now, I don't want to re-use this check_memory.json

00:01:34.770 --> 00:01:40.160
I kinda wanna leave it just there. Let's
make a new configuration file from scratch,

00:01:40.160 --> 00:01:43.900
and we'll populate it with the check for
check_disk

00:01:52.780 --> 00:01:56.200
It's a JSON dictionary, if you read the
official documentation on how to make

00:01:56.200 --> 00:01:59.060
these check definitions. It's like this:

00:02:04.600 --> 00:02:08.100
And all we have to do is fill in the check right here:

00:02:12.660 --> 00:02:15.900
Let's call it: "check_slash"

00:02:23.180 --> 00:02:25.500
Let's make the command the commander we ran.

00:02:30.480 --> 00:02:32.480
Now we get to decide if this is going to be a

00:02:32.490 --> 00:02:37.190
stand-alone check or a subscription
check. Remember that stand-alone checks

00:02:37.190 --> 00:02:42.780
are defined and scheduled by the client.
Subscription checks are defined and scheduled

00:02:42.780 --> 00:02:48.130
by server. I like standalone-checks myself. And disks are kinda one of those things

00:02:48.130 --> 00:02:52.110
that are kind of intrinsic to a server,
sort of? So let's pretend that we're going

00:02:52.110 --> 00:02:55.930
to deploy these checks with either
configuration management or through a provisioning

00:02:55.930 --> 00:03:03.300
tool, or even my hand. But by using a
stand-alone check, we can define our check_slash

00:03:03.300 --> 00:03:08.410
definition differently on every single
host,  as different host might have

00:03:08.410 --> 00:03:12.070
different thresholds or might have
different disks to check, and that kind of thing.

00:03:12.070 --> 00:03:23.530
Stand-alone checks can be defined by
simply saying "standalone":  true

00:03:26.200 --> 00:03:32.140
And if you are going to define a standalone check, you need at least an interval. This is how often the check

00:03:32.150 --> 00:03:33.110
will run.

00:03:36.540 --> 00:03:47.160
It's in seconds, so for testing I'm gonna pick 10 seconds. If you haven't spotted the typo already,

00:03:47.160 --> 00:03:53.880
I need a trailing comma on this entry,
and I need no trailing coma on this entry.

00:04:05.000 --> 00:04:06.440
Just in case

00:04:06.450 --> 00:04:07.730
let's check our work with "jq"...

00:04:10.709 --> 00:04:13.400
Looks ok. It's not that

00:04:13.400 --> 00:04:19.620
bad. The configuration is designed to be
made by a machine. JSON is a machine format,

00:04:19.620 --> 00:04:25.320
it's not very forgiving. But you can
work through it and with "jq" it's

00:04:25.320 --> 00:04:32.470
easy to check for syntax before you go
restarting the Sensu client. Because this

00:04:32.470 --> 00:04:36.199
is a standalone check, the only thing we
have to restart here is this is the sensu-

00:04:36.199 --> 00:04:39.239
client itself. Let's go ahead and do that..

00:04:48.860 --> 00:04:51.020
And now tail the logs...

00:04:58.100 --> 00:05:03.640
Now that we have a number of checks this log is getting a little hard to read. But here's the output:

00:05:04.980 --> 00:05:12.980
It is running the command we asked it to. It is coming back critical. Well, do we have any mail?

00:05:14.400 --> 00:05:15.900
We do!

00:05:19.860 --> 00:05:21.860
Our host is out of disk space.

00:05:24.740 --> 00:05:28.460
Let's clear out that ballast file and
see if it fixes it.

00:05:32.220 --> 00:05:35.000
We're gonna sneak a peak at the log again...

00:05:41.040 --> 00:05:45.080
And it already came back OK.

00:05:46.480 --> 00:05:48.180
Let's check our mail again.

00:05:49.780 --> 00:05:51.780
There's our resolve.

00:05:57.080 --> 00:05:58.180
So there you have it.

00:05:58.180 --> 00:06:03.650
We used an existing Nagios plugin, no
problem. We made our check definition.

00:06:03.650 --> 00:06:08.710
We made a stand-alone check this time: A
check that is scheduled and defined on the client only.

00:06:15.940 --> 00:06:21.160
And we got very fast feedback with an interval of 10 seconds. Now let's say that

00:06:21.160 --> 00:06:24.610
you were not content with the old-fashioned Nagios plugins and you wanted

00:06:24.610 --> 00:06:31.180
to try something new from the community
plugins repo. Maybe something that

00:06:31.180 --> 00:06:35.270
catches your eye and you think: oh I really
want some RabbitMQ checks.

00:06:35.270 --> 00:06:41.550
So you go look for them.. and there's a package for you.

00:06:44.020 --> 00:06:52.520
And looks at all these checks. By all means, take advantage of the existing work that's been open sourced

00:06:52.520 --> 00:07:00.500
for you to use! Let's see if we can install
this rubygem and take advantage of it.

00:07:04.400 --> 00:07:08.160
Let's remind ourselves where the embedded Sensu Ruby lives...

00:07:12.500 --> 00:07:17.420
To refresh your memory, Sensu comes with the embedded Ruby that we can use to install these plugins.

00:07:17.430 --> 00:07:22.300
Alternatively you could use the
existing system installed Ruby, but I

00:07:22.300 --> 00:07:27.669
like to use embedded Ruby because it comes with something for free. We'll run "gem

00:07:27.669 --> 00:07:33.979
install sensu-plugins-rabbitmq". We do
have to run this with "sudo" because all

00:07:33.979 --> 00:07:39.830
these files are owned by root. Now that it's installed let's look at that "bin"

00:07:39.830 --> 00:07:45.620
folder again and see if we have anything
new. ls /opt/sensu/embedded/bin/ | grep rabbitmq

00:07:45.620 --> 00:07:50.330
And you can see that we have
some new checks here that we can run.

00:07:50.330 --> 00:07:53.930
Let's give a "alive" one shot....

00:07:58.280 --> 00:08:01.980
RabbitMQ is alive. Let's see it fail.

00:08:10.100 --> 00:08:12.100
"Critical"

00:08:20.120 --> 00:08:22.120
Let's make a check definition...

00:08:29.420 --> 00:08:33.680
Again Sensu doesn't really mind how
you organize your files, because it does

00:08:33.680 --> 00:08:40.700
one big merge. As long as we setup these in the "checks" dictionary, it will work.

00:08:53.460 --> 00:08:55.660
We at least have to specify the command.

00:09:00.960 --> 00:09:02.960
We'll make this one a stand-alone check.

00:09:08.160 --> 00:09:10.140
And again let's try the interval of "10".

00:09:19.460 --> 00:09:21.240
Let's check our work with "jq"

00:09:25.000 --> 00:09:29.500
It's fine. Now we restart the sensu-client to pick it up...

00:09:40.620 --> 00:09:45.980
And look, there's a failure! I've made a very common mistake, something that happens

00:09:45.990 --> 00:09:49.779
all the time again, it's very easy to
make mistakes when you're writing checks

00:09:49.779 --> 00:09:54.640
out by hand. It's very likely that you'll encounter a similar situation. Can

00:09:54.640 --> 00:09:56.420
spot my typo from here?

00:09:57.480 --> 00:09:59.060
Nope! Neither can I!

00:09:59.760 --> 00:10:01.760
Let's take a look at the logs...

00:10:05.280 --> 00:10:09.020
Sensu is not running because we have an invalid configuration file.

00:10:10.680 --> 00:10:14.220
The error is a little cryptic:

00:10:15.680 --> 00:10:23.660
Check subscribers must be an array. The fact that it's looking for subscribers, hints that Sensu is

00:10:23.660 --> 00:10:27.990
interpreting this check as a "subscription check" and not a "standalone"

00:10:27.990 --> 00:10:33.890
check. With that data maybe you can spot
the error now?

00:10:36.840 --> 00:10:39.980
That's right, "standalone" is misspelled.

00:10:53.800 --> 00:10:55.800
Let's try again...

00:11:04.520 --> 00:11:10.120
It is running our check. Now what will happen if I actually stop RabbitMQ?

00:11:13.880 --> 00:11:16.700
Can the Sensu client operate with RabbitMQ stopped?

00:11:18.940 --> 00:11:20.940
The answer is "no", it cannot.

00:11:23.120 --> 00:11:24.940
But let's start it back up again...

00:11:40.400 --> 00:11:48.480
Sensu does reconnect and continues to operate. Because Sensu depends
on RabbitMQ you're not going to able to

00:11:48.490 --> 00:11:53.530
monitor directly like this. When RabbitMQ
is down this, the Sensu client can't

00:11:53.530 --> 00:11:58.430
connect to it, and therefore can't
deposit the check results of RabbitMQ

00:11:58.430 --> 00:12:03.430
being down. This can make it difficult to
check Sensu itself. In later more

00:12:03.430 --> 00:12:07.680
advanced courses I'll cover how to
monitor Sensu as a whole, for a more

00:12:07.680 --> 00:12:11.720
production environment. What
notifications to get after we stopped

00:12:11.720 --> 00:12:16.250
RabbitMQ? If the Sensu client wasn't
able to report that RabbitMQ was down,

00:12:16.250 --> 00:12:22.080
What notifications did we actually
get? Look at this: this a keepalive warning

00:12:22.080 --> 00:12:25.020
and a "resolve" that the keepalive was "ok".

00:12:26.120 --> 00:12:28.120
Let's look at the email...

00:12:29.280 --> 00:12:33.200
"No keepalive was sent from the client for 121 seconds."

00:12:33.210 --> 00:12:39.740
"Greater than the threshold of 120". This is how the Sensu-server knows when a client has stopped

00:12:39.740 --> 00:12:44.160
responding. Clients periodically send
heartbeats onto RabbitMQ for the server to

00:12:44.160 --> 00:12:48.450
pick up on. And when they stop sending
heartbeats, that's when the server knows

00:12:48.450 --> 00:12:53.120
that his client is no longer available.
So when RabbitMQ went down there was no

00:12:53.120 --> 00:12:56.660
way to the Sensu client to send
heartbeats, and the Sensu server picked

00:12:56.660 --> 00:13:00.650
up on that, and spawned an alert. It is an
interesting side effect to stopping

00:13:00.650 --> 00:13:04.630
RabbitMQ. So when you're deploying
Sensu and you see these alerts, now you

00:13:04.630 --> 00:13:08.650
know what they mean. It doesn't mean that the Sensu server can't talk to the Sensu

00:13:08.650 --> 00:13:13.470
client, at least not directly. It means that the client can't talk to the queue. And we caused

00:13:13.470 --> 00:13:16.980
that to happen here when I stopped RabbitMQ. So just FYI

00:13:16.980 --> 00:13:21.430
an interesting side effect of our testing.
That's it for adding more checks. Feel free

00:13:21.430 --> 00:13:25.300
to look at the extra resources of this
course to see the

00:13:25.300 --> 00:13:29.930
official documentation on the correct
syntax for how to define checks with Sensu,

00:13:29.930 --> 00:13:33.970
and the show notes for all the commands I used in this lecture. Till

00:13:33.970 --> 00:13:38.440
then I hope you've got a better idea of
how to make checks in Sensu, how to

00:13:38.440 --> 00:13:42.800
reuse your existing Nagios plugins. Or take advantage of the many community

00:13:42.800 --> 00:13:47.870
plugins on github. As you can see the checks we wrote are real. they're doing real work,

00:13:47.870 --> 00:13:51.020
and Sensu is making a real alert emails because of them.

